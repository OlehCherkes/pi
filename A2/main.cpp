#include <iostream>
#include <cstdint>
#include <vector>
#include <boost/asio.hpp>

// Commands from the device
#define CMD_2A_REPLY_FAIL	                    0x00
#define CMD_2A_REPLY_OK	                      0x01
#define CMD_2A_NOTIFY_MESSAGE	                0x02
#define CMD_2A_NOTIFY_SERVICE_MESSAGE	        0x03
#define CMD_2A_REPLY_TYPE	                    0x04
#define CMD_2A_REPLY_CURRENT_SERIAL         	0x05
#define CMD_2A_REPLY_JOURNAL	                0x07
#define CMD_2A_NOTIFY_JOURNAL_FULL	          0x10
#define CMD_2A_REPLY_MEMORY_DUMP	            0x11

// Commands from the application
#define CMD_2A_FAIL	                          0x50
#define CMD_2A_OK                         	  0x51
#define CMD_2A_SERVICE	                      0x52
#define CMD_2A_GET_TYPE	                      0x54
#define CMD_2A_GET_CURRENT_SERIAL	            0x55
#define CMD_2A_SET_CURRENT_SERIAL         	  0x56
#define CMD_2A_GET_JOURNAL	                  0x57
#define CMD_2A_SET_EEPROM	                    0x58
#define CMD_2A_SET_TESTER_FIRMWARE	          0x59
#define CMD_2A_SET_TIME                   	  0x5A
#define CMD_2A_GET_MEMORY_DUMP	              0x61

// Subcommands for command CMD_2A_SERVICE
#define SCMD_2A_SERVICE_GOTO_NEXT_STEP	      0x50
#define SCMD_2A_SERVICE_COEFFICIENT_UP	      0x52
#define SCMD_2A_SERVICE_COEFFICIENT_DOWN	    0x53

// Types of serial number processing rules (in CMD_2A_REPLY_TYPE)
#define TYPE_2A_SERIAL_RULE_NONE	            0x00
#define TYPE_2A_SERIAL_RULE_SIMPLE_INCREMENT	0x01

// Packet sequence types (in CMD_2A_SET_EEPROM)
#define TYPE_2A_EEPROM_PART_ORDER_MIDDLE	    0x00
#define TYPE_2A_EEPROM_PART_ORDER_FIRST	      0x01
#define TYPE_2A_EEPROM_PART_ORDER_LAST	      0x02

// Error codes in commands CMD_2A_REPLY_FAIL, CMD_2A_FAIL
#define FAIL_2A_UNSUPPORTED_REQUEST	          0x00
#define FAIL_2A_DEVICE_BUSY	                  0x01
#define FAIL_2A_TIMEOUT	                      0x02
#define FAIL_2A_CRC	                          0x03
#define FAIL_2A_USER	                        0x50
#define FAIL_2A_INCORRECT_DATA	              0x04

// Indication type
#define CMD_2A_TYPICAL                        0x00  // Blue
#define CMD_2A_WARNING                        0x01  // Yellow
#define CMD_2A_ERROR                          0x02  // Red X
#define CMD_2A_SUCCESS                        0x03  // Green V
#define CMD_2A_QUESTION                       0x04  // Green FLAG
#define CMD_2A_SUCCESS_TEST                   0x05  // CLR Screen
#define CMD_2A_CLEAR_PREVIOUS_RESULTS         0x06
#define CMD_2A_TIPICSL_ONE_LINE               0X80
#define CMD_2A_WARNING_ONE_LINE               0X81
#define CMD_2A_ERROR_ONE_LINE                 0X82
#define CMD_2A_SUCCESS_ONE_LINE               0X83

// CRC8 tabe
const uint8_t crcTable[256] = {
    0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83,
    0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41,
    0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e,
    0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc,
    0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0,
    0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,
    0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d,
    0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff,
    0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5,
    0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07,
    0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58,
    0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a,
    0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6,
    0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24,
    0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b,
    0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9,
    0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f,
    0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd,
    0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92,
    0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50,
    0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c,
    0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee,
    0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1,
    0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,
    0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49,
    0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b,
    0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4,
    0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16,
    0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a,
    0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,
    0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7,
    0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35
};

uint8_t calculateCRC(const std::vector<uint8_t>& data) {
  uint8_t crc = 0x00;
  for (const auto& byte : data) {
    crc = crcTable[crc ^ byte];
  }
  return crc;
}

struct PacketHeader {
  uint8_t protocolIdentifier;   // Идентификатор протокола
  uint8_t destinationAddress;   // Назначение пакета
  uint8_t sourceAddress;        // Источник пакета
  uint16_t packetNumber;        // Номер пакета
  uint8_t dataLength;           // Длина данных в пакете
  uint8_t headerCRC;            // CRC8 заголовка пакета

  PacketHeader() {
    protocolIdentifier = 0x2A;
    destinationAddress = 0x7F;
    sourceAddress = 0x00;
    packetNumber = 0x0C;
  }
};

std::vector <uint8_t> data = { 0x1, 0x2, 0x3, 0x4, 0x5 };

std::vector <uint8_t> dataPack(std::vector <uint8_t>& data) {
 
  std::vector <uint8_t> pacData = { CMD_2A_NOTIFY_MESSAGE, CMD_2A_SUCCESS_TEST };
  pacData.push_back(data.size());

  for (const auto& i : data)
  {
    pacData.push_back(i);
  }

  pacData.push_back(calculateCRC(pacData));

  return pacData;
}



std::vector <uint8_t> Packet(std::vector <uint8_t>& data) {
  PacketHeader header;

  std::vector <uint8_t> sendData = dataPack(data);

  header.dataLength = data.size() + 0x03;
  header.headerCRC = calculateCRC({ header.protocolIdentifier, header.destinationAddress, header.sourceAddress, (uint8_t)header.packetNumber, (uint8_t)(header.packetNumber << 8), header.dataLength });


  std::vector<uint8_t> pack = { header.protocolIdentifier, header.destinationAddress, header.sourceAddress, (uint8_t)header.packetNumber, (uint8_t)(header.packetNumber << 8), header.dataLength, header.headerCRC };


  for (const auto& i : sendData)
  {
    pack.push_back(i);
  }

  return pack;
 };


int main() {
  boost::asio::io_service io;
  boost::asio::serial_port serial(io, "/dev/ttyS0");

  serial.set_option(boost::asio::serial_port_base::baud_rate(19200));
  serial.set_option(boost::asio::serial_port_base::character_size(8));
  serial.set_option(boost::asio::serial_port_base::stop_bits(boost::asio::serial_port_base::stop_bits::one));
  serial.set_option(boost::asio::serial_port_base::parity(boost::asio::serial_port_base::parity::none));
  serial.set_option(boost::asio::serial_port_base::flow_control(boost::asio::serial_port_base::flow_control::none));

  // Send data
  //std::string data_to_send = "1";
  //boost::asio::write(serial, boost::asio::buffer(data_to_send));

  //Packet packetToSend;
  //packetToSend.data = { 0x2A, 0x7F, 0x00, 0x0C, 0x00, 0x13, 0xBF, 0x02, 0x02, 0x10, 0x45, 0x52, 0x52, 0x20, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x6F, 0x72, 0x3D, 0x46, 0x46, 0xD8 };
  //uint8_t data[] = {0x2A, 0x7F, 0x00, 0x0C, 0x00, 0x13, 0xBF, 0x02, 0x02, 0x10, 0x45, 0x52, 0x52, 0x20, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x6F, 0x72, 0x3D, 0x46, 0x46, 0xD8};
  //uint8_t data[] = {0x2A, 0x7F, 0x00, 0x0C, 0x00, 0x25, 0xDC, 0x02, 0x00, 0x22, 0x50, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x6D, 0x61, 0x74, 0x6F, 0x72, 0x20, 0x4C, 0x50, 0x43, 0x39, 0x31, 0x36, 0x20, 0x4C, 0x50, 0x43, 0x39, 0x33, 0x36, 0x20, 0x76, 0x37, 0x2E, 0x30, 0x39, 0x0A, 0x0D, 0x0E};
  //uint8_t data[] = { 0x2A, 0x7F, 0x00, 0x0C, 0x00, 0x42, 0x3A, 0x02, 0x00, 0x3F, 0x55, 0x70, 0x72, 0x6F, 0x78, 0x20, 0x6D, 0x69, 0x6E, 0x69, 0x20, 0x52, 0x53, 0x34, 0x38, 0x35, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x61, 0x3A, 0x46, 0x30, 0x2E, 0x32, 0x32, 0x35, 0x20, 0x20, 0x53, 0x69, 0x7A, 0x65, 0x3A, 0x30, 0x30, 0x32, 0x30, 0x34, 0x38, 0x20, 0x20, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x3A, 0x46, 0x46, 0x46, 0x46, 0x28, 0x36, 0x35, 0x35, 0x33, 0x35, 0x29, 0x43 };
  //boost::asio::write(serial, boost::asio::buffer(data, sizeof(data)));

  //packetToSend.sendPacket(data, sizeof(data));

  //while (1)
  //{
  //  boost::asio::write(serial, boost::asio::buffer(&packetToSend, sizeof(Packet)));
  //  sleep(1);
  //}


  // Get Data
  //char read_data[128];
  //size_t bytes_read = boost::asio::read(serial, boost::asio::buffer(read_data, sizeof(read_data)));
  //std::string received_data(read_data, bytes_read);

  //std::cout << "Received data: " << received_data;

  std::vector <uint8_t> send = Packet(data);
  boost::asio::write(serial, boost::asio::buffer(send, send.size()));

  serial.close();

  return 0;
}